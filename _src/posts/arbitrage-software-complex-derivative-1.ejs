
<figure>
  <img src="<%- cloudinary%>/images/posts/arbitrage-software-complex-derivative2.png">
  <figcaption>
    Images by <a href="http://www.freedigitalphotos.net/images/Money_g61-Stacked_US_Dollar_p66613.html">sheelamohan</a>
    and <a href="http://www.freedigitalphotos.net/images/interconnected-network-structure-shows-networking-photo-p206671">Stuart Miles</a>
    at FreeDigitalPhotos.net
  </figcaption>
</figure>

<h2>Incoming Cash Flow of Software = Revenue</h2>

<p>
  To analyze software as a complex derivative, you need to decompose its cash flow structure.
  Firstly let's look at its incoming cash flow, which is revenues generated from software (in a more strict sense, revenues from the business dependent on the software).
</p>

<figure>
  <img src="<%- cloudinary%>/images/posts/arbitrage-software-derivative-unpredictable-revenues.png">
  <figcaption><a href="http://www.freedigitalphotos.net/images/businessman-pushing-tactile-button-photo-p310733">Image by stockimages at FreeDigitalPhotos.net</a></figcaption>
</figure>

<p>
  It is almost always impossible to predict the exact revenues from the software, as you cannot tell what happens in the future,
  future revenue has probabilistic nature.
</p>

<p>
  To make further analysis, in later articles, it is important to take this probabilistic, uncertain nature of future cash flow into account.
</p>

<h2>What if the software doesn't generate revenue at all?</h2>

<p>
  There are cases where your software does not generate revenue at all. Even in such cases, you still pay maintenance cost for the software.
  Examples of such software is backend database or data layer, middle tier like messaging layer, or maybe internal books and record system for accounting.
</p>

<p>
  In other articles, I will discuss how to make investment, const analysis on such software, but basic techniques are:
  <ul>
    <li>Just focus on the cost components of the software</li>
    <li>Or, think about the entire "system"</li>
      <ul>
        <li>and treat these as "part" of the whole revenue-generating system</li>
      </ul>
  </ul>
</p>

<h2>Outgoing Cash Flow of Software = Maintenance Cost</h2>

<p>
  The outgoing cash flow of software is maintenance cost in general.
  And the large part of the maintenance cost is the pay to the developers and support people of the software.

  Software metrics, for example as follows, help you to determine the cost break-down structure of software.
</p>

<ul>
  <li>Frequency of troubles</li>
  <li>Average time to trouble resolution</li>
  <li>Build Frequency</li>
  <li>Average build manual work load</li>
</ul>

<p>
  As discussed in the below two articles, people's desktop app usage metrics can be a very useful metric.
</p>
<ul>
  <li>Desktop app usage metrics... (e.g. RescueTime)</li>
</ul>

<p>
  <a href="pricing-and-accounting-software-expenses-time-tracking.html">Pricing and Accounting Software - Expenses, Time-Tracking for Maintenance Cost Calculation</a>
  <a href="pricing-and-accounting-software-expenses-rescuetime.html">Pricing and Accounting Software - Expenses, Time-Tracking with RescueTime</a>
</p>

<p>
  Once you collected necessary software metrics, then you need to determine and calculate the cost associated to the software.
</p>

<figure>
  <img src="<%- cloudinary%>/images/posts/arbitrage-software-derivative-unpredictable-cost.png">
  <figcaption><a href="http://www.freedigitalphotos.net/images/Business_people_g201-Worried_Businessman_With_Pc_p67341.html">Image by David Castillo Dominici at FreeDigitalPhotos.net</a></figcaption>
</figure>

