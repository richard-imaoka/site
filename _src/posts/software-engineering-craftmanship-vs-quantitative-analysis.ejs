
<h2>Software Engineering has been successful in creating great software products</h2>
<p>
  Like you can see many people signed up for "<a href="http://manifesto.softwarecraftsmanship.org/">Software Craftsmanship Manifesto</a>",
  programmers are self-driven, serious people, willing to make the world better with technologies.
  Thus there has always been tremendous innovations in the software industry.
</p>

<p>
  For example, I am always impressed by the fast paced development of web front-end frameworks and libraries,
  which people usually say "trends change every half a year". Web front-end programmers are doing pretty good job
  trying to resolve problems which many other people face, in this rapid moving environment.
  <figure>
    <img src="<%- cloudinary%>/images/posts/wordcloud.svg">
  </figure>
</p>

<p>
  Not only about software itself, also there has been a lot of effort in <strong>software development processes</strong>.
  Best practices are shared and publicized, and modern development environment has automated test with good coverage,
  strict but active code review process, issues and enhancement requests are tracked in one place, building process is becoming more and more automated.

  <figure>
    <img src="<%- cloudinary%>/images/posts/wordcloud2.svg">
  </figure>
</p>

<h2>Most software projects still fail today</h2>
<p>
  OK, so now programmers know <strong>how</strong> to create great software,
  is it getting easier to make software projects successful?
</p>
<p>
  The answer is sadly no. Still, <strong>most of software projects fail</strong>, or at their best, deliver software with poor quality.
  You can see the <a href="#references">references</a> about failed projects.
</p>

<h2>Software Engineering has been "Craftsmaship" rather than Science</h2>
<p>
  Did those projects fail because the programmers and project managers were not skilled enough?
  That is true to some extent.
</p>

<p>
  However, this Craftsmanship mind, focusing on right use of <strong>technologies</strong> and <strong>methodologies</strong> lacks a significantly important point.
  There is harsh truth:
</p>

<p style="font-size: 24px; text-align: center">
  Projects still fail, no matter how skilled programmer you are.
</p>

<p>
  Do you think top level programmers, with excellent project managers, will make every project successful?
  Certain percentage of projects will fail even though you hire the best people.
  Creating and maintaining Software is now truly a business, and there is no single business you know it will succeed, no matter how skilled people you have.
  And what's more, in real world, that is just impossible to hire the best people. Every company lacks well skilled developers, well skilled project managers, but they still need to do their business.
</p>

<p>
  Software Craftsmanship - building up on Software Engineering skills is very <stron>important</stron>, but it is only one side of the story.
  You also need to learn about how to make sound business judgement, as you cannot always expect
  top level programmers to work for your company.
</p>

<h2>Financial Engineering for quantitative analysis, and sound business judgement under uncertainty</h2>
<p>
  There are important questions like below, traditional Software Engineering didn't answer:
  <ul>
    <li>Does this new technology saves us money, or actually we <strong>lose</strong> money?</li>
    <li>How <strong>likely</strong> does my project get extended?</li>
    <li>Two good technologies - which <strong>fits</strong> us better?</li>
    <li>Replacing a <strong>legacy</strong> system, or invest in something else?</li>
    <li><strong>Total</strong> cost of software project ... including maintenance cost</li>
  </ul>

  These questions could be answered if you have adequate expertise on subject technologies and methodologies.
  If you are a Object Oriented Programming expert, you know what benefits it brings to your company. However, at the same time,
  are you also a Functional Programming expert? What if project managers think Functional styles would bring certain benefit but they are not sure if they are willing to invest in it?
  You need to answer to such questions in real world, <strong>without having time</strong> to learn about everything.
</p>

  <figure>
    <img src="<%- cloudinary%>/images/posts/software-engineering-2.png">
  </figure>

<p>
  Financial Engineering frameworks are exactly built to meet such a situation - you don't know what happens in the future,
  but you still make investment decisions. Financial Engineering enhances Software Engineering especially in the following aspects:
  <ul>
    <li><strong>Quantitative</strong> analysis of software development cost and maintenance cost</li>
    <li><strong>Probabilistic</strong> frameworks to make business decisions, under uncertainty</li>
  </ul>

  I am excited to introduce methodologies, and more excited to hear about suggestions and critiques from others, to build this framework better and more robust!
</p>
