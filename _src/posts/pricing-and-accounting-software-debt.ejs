<h2>Why the metaphor Technical "Debt" is used? Because it causes maintenance costs</h2>
<p>
  Let's review why people call software as Technical Debt.
  There is an excellent summary article, "<a href="https://medium.com/@kellan/towards-an-understanding-of-technical-debt-ae0f97cc0553#.pn7e7x4p5">Towards an understanding of technical debt</a>", which puts Technical Debt into 5 different categories:

  <ol>
    <li>Maintenance work</li>
    <li>Features of the codebase that resist change</li>
    <li>Operability choices that resist change</li>
    <li>Code choices that suck the will to live</li>
    <li>Dependencies that resist upgrading</li>
  </ol>

  Eventually, as software causes cost as such, people call it Technical Debt, something you have to <strong>pay for</strong>.

</p>

<h2>Financial Debt, you have to pay it back</h2>
<p>
  Speaking of Financial Debt, typically you have periodic payments to pay back the debt you are obligated.
  And as the time goes by, the debt amount decreases.

  <figure style="text-align:center">
    <img src="<%- cloudinary%>/images/posts/accounting-debt-financial-debt.png">
    <figcaption><a href="http://www.freedigitalphotos.net/images/Money_g61-Stacked_US_Dollar_p66613.html">Image by sheelamohan at FreeDigitalPhotos.net</a></figcaption>
  </figure>
</p>

<p>
  Also another important property is that usually it is straightforward to derive the periodic payment amount,
  from the debt amount for Financial Debt.
  <figure style="text-align:center">
    <img src="<%- cloudinary%>/images/posts/income-bond.png">
  </figure>
</p>


<h2>Technical Debt does not require you to pay it back</h2>
<p>
  On the other hand, Technical Debt doesn't hold the properties as discussed above for usual Financial Debt.
  As Ward Cunningham writes in "<a href="http://c2.com/cgi/wiki?WardExplainsDebtMetaphor">Ward Explains Debt Metaphor</a>",
  you don't need to pay back Technical Debt.

  <figure style="text-align:center">
    <img src="<%- cloudinary%>/images/posts/accounting-debt-technical-debt.png">
    <figcaption><a href="http://www.freedigitalphotos.net/images/Business_people_g201-Worried_Businessman_With_Pc_p67341.html">Image by David Castillo Dominici at FreeDigitalPhotos.net</a></figcaption>
  </figure>

  If you don't pay back (i.e. clean up) Technical Debt, you need to keep paying continuous and consistent maintenance cost over time.

</p>

<h2>We need mathematical models to tie Technical Debt and Software maintenance cost</h2>
<p>
  Also another important property about Technical Debt is it is not straightforward to relate the mainteance cost amount and the Technical Debt amount.
  For example, if you incrase the number of lines if your software source code, chances are that your maintenance cost might more than double or even triple as a result.
</p>

<p>
  With the advance of today's technologies, it is becoming easier to collect and calculate software metrics, for Technical Debt.
  For example, simply the number of lines in your code, cyclomatic complexity, frequency of issues from a certain portion of the code, etc.
</p>

<p>
  <figure style="text-align:center">
    <img src="<%- cloudinary%>/images/posts/accounting-debt-technical-debt-model.png">
    <figcaption>
      Images by
      <a href="http://www.freedigitalphotos.net/images/Education_g314-Mathematical_Background_p86649.html">Janaka Dharmasena</a>
      and
      <a href="http://www.freedigitalphotos.net/images/Money_g61-Stacked_US_Dollar_p66613.html">sheelamohana</a>
      at FreeDigitalPhotos.net
    </figcaption>
  </figure>

  Then you need <strong>mathematical models</strong> to relate the software metrics to the maintenance cost.
  Just showing software metrics will not get you anywhere. You need to carefully review the metrics and use them to effectively manage your software maintenance cost.
</p>

</figure>
