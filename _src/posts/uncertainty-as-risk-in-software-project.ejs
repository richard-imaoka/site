<h2>You can never tell when your Software Project will be finished</h2>

<figure style="text-align:center">
  <img src="/images/posts/ID-10098216.jpg" style="width: 100%; max-width: 400px;">
  <figcaption><a href="http://www.freedigitalphotos.net/images/Ideas_and_decision_m_g409-Figure_With_Red_Question_Mark_p98216.html">Image by Master isolated images at FreeDigitalPhotos.net</a></figcaption>
</figure>

<p>The below looks very <strong>obvious</strong>, and maybe even stupid, but it's the <strong>first step</strong> to understand what "risk" means in software projects.</p>

<p>Typically in a software  project, toward the end of the project, requirements get clearer, people get detailed ideas about implementation, and there are less tasks to do. So, of course, it gets easier to predict when the project is completed, as the project gets closer to completion.</p>

<p>In contrast, predicting the project completion is hard at the beginning. Unexpected issues arise as the project goes on</p>

<p>Sounds too obvious? But that yields into the following definition...</p>

<h2>High risk project, as highly uncertain completion date, not a long project</h2>

<p>Even though two projects can have the same planned completion date, one might have more predictable completion than the other.</p>

<p>For example, you may be using legacy and well-known technologies in one of the projects, and you can give more accurate estimate on project's completion. The other project might involve newer technologies you are not familiar with. In such a case, the former project has less risk. The latter has more risk.</p>

<figure style="text-align:center">
  <img src="/images/posts/risk.png" style="width: 100%; max-width: 400px;">
</figure>

<p>So, a riskier project <strong>doesn't necessarily</strong> mean a longer project. If project's completion is <strong>less predictable</strong>, the project is <strong>riskier</strong>.</p>

<p>Of course, generally as a project gets longer and larger, its completion date is more difficult to predict though.</p>

<h2>Risk in Financial Engineering is not a bad thing</h2>

<p>I chose the above definition of software project's risk, to match the meaning of risk in Financial Engineering.</p>

<p>In Financial Engineering, a <strong>risk is not a bad thing</strong>. Actually, it doesn't mean anything good or bad. It's just uncertainty about the price of an asset.</p>

<p>For example, you don't know Facebook's stock price tomorrow. So that means Facebook's stock price has a risk. (i.e.) uncertainty.</p>

<p>If Facebook's stock never ever changes its value, you have no risk but you cannot get any return from investing in Facebook.</p>

<p>So, if you want a return from your investment, in other words, if you <strong>expect upside</strong>, you need to <strong>accept potential downside</strong> as the price of Facebook goes up or down, either way.</p>

<p>That's why I said a risk is not bad - whenever you expect return from investment, there is a risk.</p>

<h2>Importance of risk management in software projects</h2>

<p>Financial Engineering admits you can never accurately predict any asset's price in the future, but still it allows you <strong>manage risks</strong>.</p>

<p>The key to manage risks is <strong>quantifying</strong> them, describing them in mathematical forms. Mathematics don't need to be complicated, but need to be simple and robust enough.</p>

<p>Like in Financial Engineering, if you expect return from projects, you need to accept risks. The converse is also true. If you take a risk, you must be expecting a return (otherwise, what's the reason of you taking the risk!?) </p>

<p>I'll describe how the Financial Engineering frameworks can be applied in the field of software project management.</p>