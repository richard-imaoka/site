<h2>"That software out there resolves my issue" syndrome</h2>
<figure>
  <img src="<%- cloudinary%>/images/posts/arbitrage-selling-replace.png">
  <figcaption>
    Images by <a href="http://www.freedigitalphotos.net/images/abandoned-old-house-photo-p290063">Witthaya Phonsawat</a>
    and <a href="http://www.freedigitalphotos.net/images/exterior-shot-of-a-glass-building-photo-p258343">stockimages</a>
    at FreeDigitalPhotos.net
  </figcaption>
</figure>

<p>
  As a software developer, are you sick of your current clunky development environment and
  and buggy software continuously causing <strong>pain</strong> to you?
  Do you dream of a peace situation with cleaner development processes,
  easier and more fun development with newer framework, libraries, etc?
</p>

<p>
  You might be thinking like:
  <ul>
    <li>Spring MVC sucks => why not Scala Play framework?</li>
    <li>jQuery makes a mess => Angular or even React would be a rescue?</li>
    <li>Terrible backend performance => let's introduce async, non-blocking frameworks</li>
    <li>Why still CVS in 2016!? => let's do Git!</li>
    <li>No manual testing anymore => CircleCI? Jenkins?</li>
  </ul>
</p>

<p>
  It is pretty important developers keep up to the current state of modern technologies, tools,
  what technical challenges they are trying to resolve.
  And yes, they would resolve some of your problems for sure.
</p>

<p>
  However, most likely you <strong>suffer the same situation</strong> for long, maybe for years or that is never resolved.
  There are certain reasons why it is as such, and we should carefully analyze this.
</p>


<h2>Replacement cost matters, even if you know the after-replacement world is a peace</h2>

<figure>
  <img src="<%- cloudinary%>/images/posts/arbitrage-software-replacement-seesaw">
</figure>

<blockquote>If we use a framework X, then the maintenance burden would be 1/2!</blockquote>

<p>
  is probably right, but missing replacement cost.
  End-to-end state comparison, (i.e):
  <ul>
    <li>"current situation" vs</li>
    <li>"after replacement is done"</li>
  </ul>
  is not enough. You also have to think about replacement cost, too:
  <ul>
    <li>learning curve</li>
    <li>initial-phase issues</li>
    <li>retirement work for the existing software</li>
    <li>etc...</li>
  </ul>
  Some of them is what "Technical Debt" discussion covers.
</p>

<p>
  (There is also risk of actually adding more maintenance cost thant the benefit new technologies give,
  but it's a different topic we will also cover later.)
</p>

<h2>Right comparison, to achieve better Tech environment</h2>
<p>
  I am going to cover this comparison in more detail, in a series of articles.
  The purpose is to give sounding economic rationale, to "<strong>achieve</strong>" better Technology environment and stack by replacement,
  <strong>NOT </strong> just to give enough reasons to deny the idea of replacement.
</p>